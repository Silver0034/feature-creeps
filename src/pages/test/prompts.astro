---

---

<script>
  import { CharacterSheet } from "@utilities/character-sheet";
  import { initLlm } from "@utilities/openai";
  import { state } from "@utilities/state";
  import { initTts, longSpeak } from "@utilities/tts";
  import {
    isStrength,
    balanceAbility,
    generateClass,
    validateAbility,
    combat,
    generateEnemy,
    genBattleRoyale,
  } from "@utilities/prompts";
  import type { TTS } from "@utilities/tts";

  state.round = 20;

  const SPEAK: boolean = false;

  const llmPromise = initLlm({
    engine: "local",
    modelName: "gemma-2-9b-it-q4f16_1-MLC",
  });
  let ttsPromise: Promise<TTS | undefined>;
  if (SPEAK) {
    ttsPromise = initTts({ type: "kokoro", voice: "Heart" });
  }

  async function generateText(): Promise<void> {
    let speechPromise: Promise<any> = Promise.resolve();
    if (SPEAK) {
      speechPromise = ttsPromise;
    }

    const ability: string = "Gravitic Mine";
    const vorlok = Object.assign(new CharacterSheet(), {
      name: "Vorlok, Devourer of Stars",
      className: "Cosmic Titan",
      level: 20,
      strengths: [
        "Can manipulate gravity to crush enemies or slow their movement",
        "Immune to all non-magical attacks",
        "Regenerates health rapidly in starlight",
        "Capable of firing energy beams that pierce through magical barriers",
      ],
      weaknesses: [
        "Insatiable appetite for the stars makes him unable to sustain combat for long",
      ],
    });
    const microwave = Object.assign(new CharacterSheet(), {
      name: "Microwave Disaster",
      className: "Food Explosion",
      level: 3,
      strengths: [
        "Emits powerful microwaves",
        "Contaminates its enemies with a horrid goo",
      ],
      weaknesses: [
        "Powerless (yet still disgusting) when unplugged",
        "Weak to cleaning supplies",
      ],
    });
    const alastor = Object.assign(new CharacterSheet(), {
      name: "Alastor the Adventurer",
      className: "Knight",
      level: 8,
      strengths: ["Trained in swordsmanship", "Brave", "Honorable"],
      weaknesses: [
        "Self-absorbed",
        "Headstrong",
        "Follows a rigid code of ethics, avoiding dirty paths to victory",
      ],
    });

    const isStrengthPromise = isStrength(vorlok, ability);
    const balanceAbilityPromise = balanceAbility(vorlok, ability, true);
    const generateClassPromise1 = generateClass(vorlok);
    const generateClassPromise2 = generateClass(microwave);
    const generateClassPromise3 = generateClass(alastor);
    const validateAbilityPromise = validateAbility(vorlok, ability);
    const combatPromise = combat(vorlok, microwave);
    const generateEnemyPromise = generateEnemy(3);
    const genBattleRoyalePromise = genBattleRoyale([
      vorlok,
      microwave,
      alastor,
    ]);

    try {
      const result: any = await isStrengthPromise;
      console.log(result);
    } catch (error) {
      console.error("Error generating text:", error);
    }
    try {
      const result: any = await balanceAbilityPromise;
      console.log(result);
      if (SPEAK) {
        await speechPromise;
        speechPromise = longSpeak(
          `The balance ability to ${ability} was: ${result}`
        );
      }
    } catch (error) {
      console.error("Error generating text:", error);
    }

    try {
      const result: any = await generateClassPromise1;
      console.log(result);
      if (SPEAK) {
        await speechPromise;
        speechPromise = longSpeak(
          `A suitable class name for ${vorlok.name} is: ${result}`
        );
      }
    } catch (error) {
      console.error("Error generating text:", error);
    }
    try {
      const result: any = await generateClassPromise2;
      console.log(result);
      if (SPEAK) {
        await speechPromise;
        speechPromise = longSpeak(
          `A suitable class name for ${microwave.name} is: ${result}`
        );
      }
    } catch (error) {
      console.error("Error generating text:", error);
    }
    try {
      const result: any = await generateClassPromise3;
      console.log(result);
      if (SPEAK) {
        await speechPromise;
        speechPromise = longSpeak(
          `A suitable class name for ${alastor.name} is: ${result}`
        );
      }
    } catch (error) {
      console.error("Error generating text:", error);
    }

    try {
      const result: any = await validateAbilityPromise;
      console.log(result);
      if (SPEAK) {
        await speechPromise;
        speechPromise = longSpeak(
          `The results of the ability validation for ${ability} are as follows: ${result[1]}`
        );
      }
    } catch (error) {
      console.error("Error generating text:", error);
    }
    try {
      const result: any = await combatPromise;
      console.log(JSON.stringify(result, null, 2));
      if (SPEAK) {
        await speechPromise;
        speechPromise = longSpeak(
          `The results of the combat between ${vorlok.name} and ${microwave.name} are as follows: ${result[1]}`
        );
      }
    } catch (error) {
      console.error("Error generating text:", error);
    }

    try {
      const result: any = await generateEnemyPromise;
      console.log(JSON.stringify(result, null, 2));
    } catch (error) {
      console.error("Error generating text:", error);
    }

    try {
      const result: any = await genBattleRoyalePromise;
      console.log(JSON.stringify(result, null, 2));
      if (SPEAK) {
        await speechPromise;
        speechPromise = longSpeak(
          "The results of the battle royale are as follows: " + result[1]
        );
      }
    } catch (error) {
      console.error("Error generating text:", error);
    }
  }

  await llmPromise;
  generateText();
</script>

<p>Check the console</p>
