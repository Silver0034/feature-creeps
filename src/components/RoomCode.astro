---
import { Icon } from 'astro-icon/components'
const roomCodeLength = 4
const textLegend = 'Enter your room code:'
const textQr = 'Or join with QR'
---

<style define:vars={{ roomCodeLength }}>
	#roomCode {
		--gap: 0.5em;
		--input-font-size-min: 1rem;
		--input-font-size-max: 5rem;
		--input-font-size-target: calc(100vw / calc(var(--roomCodeLength) * 2));
		--outline-color: var(--color-text);

		--input-font-size: clamp(
			var(--input-font-size-min),
			var(--input-font-size-target),
			var(--input-font-size-max)
		);

		position: relative;
		margin-block: 1rem;
		padding: 0;
		border: none;

		legend {
			margin-block-end: 0.25rem;
		}

		.inputs {
			display: flex;
			gap: var(--gap);
			margin: 0 auto;
			text-align: center;
			justify-content: center;
		}
		input {
			width: 2ch;
			font-family: var(--font-heading);
			font-size: clamp(
				1rem,
				calc(calc(80vw / calc(var(--roomCodeLength) * 1.5))),
				5rem
			);
			text-align: center;
			text-overflow: show;
			outline: none;
			text-transform: uppercase;
			border: 1.5px solid var(--color-text);
			border-radius: 0.2em;
			box-shadow:
				inset 0.25rem 0.25rem 0.5rem 0 hsl(0deg 0% 0% / 25%),
				0.25rem 0.25rem 0.5rem 0 hsl(0deg 0% 0% / 25%);
		}
		label {
			position: relative;
			transition-duration: 0.5s;

			&:focus-within {
				--outline-color: var(--color-primary);
				transform: translateY(-0.25em) scale(1.01);
			}

			&::after {
				content: '';
				position: absolute;
				display: inline-block;
				height: 1.5px;
				left: 0.75rem;
				right: 0.75rem;
				bottom: 0.5rem;
				background-color: var(--color-primary);
				opacity: 0.25;
			}
		}
		.outline {
			position: absolute;
			inset: 0;
			height: 100%;
			width: 90%;
			stroke-width: 1.5px;
		}
		.qr {
			position: absolute;
			right: 0;
			top: 0;
		}
	}
</style>

<fieldset id='roomCode'>
	<legend>{textLegend}</legend>
	<!-- <a class='qr' href='#'>{textQr} <Icon name='fa6-solid:qrcode' /></a> -->

	<input name='roomCode' class='fullRoomCode' type='hidden' />

	<div class='inputs'>
		{
			Array.from({ length: roomCodeLength }).map((_, i) => (
				<label>
					<input type='text' maxlength='1' class='character' />
				</label>
			))
		}
	</div>

	<script>
		/*
    If a user inputs, tabs, delete, or arrows right move to next input.
    If they arrow left, backspace move to previous input.
    */
		const inputs = document.querySelectorAll<HTMLInputElement>(
			'#joinRoom .character'
		)
		inputs.forEach((input, i) => {
			input.addEventListener('input', (e) => {
				const target = e.target as HTMLInputElement
				const isAlphaNumeric = target.value.match(/[a-zA-Z0-9]/)
				const isLastInput = i === inputs.length - 1

				if (isAlphaNumeric && !isLastInput) {
					inputs[i + 1].focus()
				}
			})

			input.addEventListener('keydown', (e: KeyboardEvent) => {
				const isFirstInput = i === 0
				const isLastInput = i === inputs.length - 1

				// Move left
				if (
					['ArrowLeft', 'Backspace'].includes(e.key) &&
					!isFirstInput
				) {
					inputs[i - 1].focus()
				}

				// Move right
				if (['ArrowRight', 'Delete'].includes(e.key) && !isLastInput) {
					inputs[i + 1].focus()
				}

				// Clear inputs on delete
				if (['Delete', 'Backspace'].includes(e.key)) {
					e.preventDefault()
					input.value = ''
				}
			})

			input.addEventListener('paste', (e: ClipboardEvent) => {
				e.preventDefault()
				const pasteData = e.clipboardData?.getData('text') || ''
				const pasteArray = pasteData.split('').slice(0, inputs.length)

				pasteArray.forEach((char, index) => {
					;(inputs[index] as HTMLInputElement).value = char
				})

				if (pasteArray.length < inputs.length) {
					;(inputs[pasteArray.length] as HTMLInputElement).focus()
				}

				if (pasteArray.length === inputs.length) {
					inputs[inputs.length - 1].focus()
				}
			})

			// On any inputs changing, put the full room code into the hidden input
			input.addEventListener('input', () => {
				const roomCode = Array.from(inputs)
					.map((input) => input.value)
					.join('')
				const hiddenInput = document.querySelector(
					'#roomCode .fullRoomCode'
				) as HTMLInputElement
				hiddenInput.value = roomCode
			})
		})
	</script>
</fieldset>
