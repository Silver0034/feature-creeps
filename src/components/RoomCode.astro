---
import { Icon } from 'astro-icon/components'
const roomCodeLength = 4
const textLegend = 'Enter your room code:'
const textQr = 'Or join with QR'
---

<style define:vars={{ roomCodeLength }}>
	#roomCode {
		--border-color: var(--color-text);
		--border-color-focus: var(--color-primary);
		--gap: 0.5em;
		--input-font-size-min: 1rem;
		--input-font-size-max: 5rem;
		--input-font-size-target: calc(100vw / calc(var(--roomCodeLength) * 2));
		--outline-color: var(--color-text);

		--input-font-size: clamp(
			var(--input-font-size-min),
			var(--input-font-size-target),
			var(--input-font-size-max)
		);

		position: relative;
		display: grid;
		grid-template-columns: repeat(4, 1fr);
		column-gap: var(--gap);
		row-gap: 0.25em;
		margin-block: 1rem;
		padding: 0;
		border: none;

		fieldset {
			display: contents;
		}

		legend {
			padding: 0;
			grid-column: 1 / span 2;
		}

		.qr {
			text-align: right;
			grid-column: 3 / span 2;

			svg {
				margin-left: 1ch;
			}
		}

		input {
			width: 100%;
			aspect-ratio: 3 / 4;
			font-family: var(--font-heading);
			font-size: clamp(1rem, 25vw * 0.6, 5rem);
			text-align: center;
			text-overflow: show;
			text-transform: uppercase;
			outline: 2px solid transparent;
			border: 1px solid var(--border-color);
			border-radius: 0.25rem;
			box-shadow: 0 0 0.5rem rgba(0, 0, 0, 0.2);
			overflow: hidden;
			min-height: 1.5rem;
			transition:
				border-color 0.1s ease-in-out,
				box-shadow 0.1s ease-in-out,
				outline 0.1s ease-in-out;
			z-index: 1;

			&:focus {
				outline-color: var(--border-color-focus);
				border-color: var(--border-color-focus);
				box-shadow: 0 0 0.75rem rgba(0, 0, 0, 0.2);
			}
		}
		.outline {
			position: absolute;
			inset: 0;
			height: 100%;
			width: 90%;
			stroke-width: 1.5px;
		}
	}
</style>

<div id='roomCode'>
	<fieldset>
		<legend>{textLegend}</legend>
		<a class='qr' href='#'>{textQr} <Icon name='fa6-solid:qrcode' /></a>

		<input name='roomCode' class='fullRoomCode' type='hidden' />

		{
			Array.from({ length: roomCodeLength }).map((_, i) => (
				<input type='text' maxlength='1' class='character' />
			))
		}
	</fieldset>
</div>

<script>
	/*
    If a user inputs, tabs, delete, or arrows right move to next input.
    If they arrow left, backspace move to previous input.
    */
	const inputs = document.querySelectorAll<HTMLInputElement>(
		'#joinRoom .character'
	)
	inputs.forEach((input, i) => {
		input.addEventListener('input', (e) => {
			const target = e.target as HTMLInputElement
			const isAlphaNumeric = target.value.match(/[a-zA-Z0-9]/)
			const isLastInput = i === inputs.length - 1

			if (isAlphaNumeric && !isLastInput) {
				inputs[i + 1].focus()
			}
		})

		input.addEventListener('keydown', (e: KeyboardEvent) => {
			const isFirstInput = i === 0
			const isLastInput = i === inputs.length - 1

			// Move left
			if (['ArrowLeft', 'Backspace'].includes(e.key) && !isFirstInput) {
				inputs[i - 1].focus()
			}

			// Move right
			if (['ArrowRight', 'Delete'].includes(e.key) && !isLastInput) {
				inputs[i + 1].focus()
			}

			// Clear inputs on delete
			if (['Delete', 'Backspace'].includes(e.key)) {
				e.preventDefault()
				input.value = ''
			}
		})

		input.addEventListener('paste', (e: ClipboardEvent) => {
			e.preventDefault()
			const pasteData = e.clipboardData?.getData('text') || ''
			const pasteArray = pasteData.split('').slice(0, inputs.length)

			pasteArray.forEach((char, index) => {
				;(inputs[index] as HTMLInputElement).value = char
			})

			if (pasteArray.length < inputs.length) {
				;(inputs[pasteArray.length] as HTMLInputElement).focus()
			}

			if (pasteArray.length === inputs.length) {
				inputs[inputs.length - 1].focus()
			}
		})

		// On any inputs changing, put the full room code into the hidden input
		input.addEventListener('input', () => {
			const roomCode = Array.from(inputs)
				.map((input) => input.value)
				.join('')
			const hiddenInput = document.querySelector(
				'#roomCode .fullRoomCode'
			) as HTMLInputElement
			hiddenInput.value = roomCode
		})
	})
</script>
